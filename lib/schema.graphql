"Validate level types"
enum Level {
  beginner
  intermediate
  advanced
}

union GlobalSearch = Course | Student | Monitor

type Course {
  id: ID!
  title: String!
  teacher: String
  description: String!
  topic: String @deprecated
  people: [Student]
  level: Level
}

interface Person {
  id: ID!
  name: String!
  email: String!
}

type Student implements Person {
  id: ID!
  name: String!
  email: String!
  avatar: String
}

type Monitor implements Person {
  id: ID!
  name: String!
  email: String!
  phone: String
}

type Query {
  "Returns all courses"
  getCourses: [Course]
  "Returns a course"
  getCourse(id: ID!): Course
  "Returns all people"
  getPeople: [Person]
  "Returns a person"
  getPerson(id: ID!): Person
  "Run a global search"
  searchItems(keyword: String!) : [GlobalSearch]
}

input CourseInput {
  title: String!
  teacher: String
  description: String!
  topic: String
  level: Level
}

input CourseEditInput {
  title: String
  teacher: String
  description: String
  topic: String
}

input PersonInput {
  name: String!
  email: String!
  phone: String
  avatar: String
}

input PersonEditInput {
  name: String
  email: String
  phone: String
  avatar: String
}

type Mutation {
  "Create a course"
  createCourse(input: CourseInput!): Course
  "Edit a course"
  editCourse(id: ID!, input: CourseEditInput!): Course
  "Create a person"
  createPerson(input: PersonInput!): Person
  "Edit a person"
  editPerson(id: ID!, input: PersonEditInput!): Person
  "Add a person to a course"
  addPeople(courseID: ID!, personID: ID!): Course
}
